"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sage = void 0;
const event_app_close_1 = __importDefault(require("./hooks/event.app.close"));
const event_compiler_stats_1 = __importDefault(require("./hooks/event.compiler.stats"));
/**
 * Sage preset
 *
 * @public
 */
exports.Sage = {
    /**
     * Extension identifier
     *
     * @public
     */
    name: '@roots/sage',
    /**
     * Extension boot
     *
     * @public
     */
    boot: async (app) => {
        /**
         * Override output directory for svg assets
         * `@roots/bud-build` places them, by default, in `svg/`
         */
        app.build.rules.svg.setGenerator(app => ({
            filename: app.store.is('features.hash', true)
                ? 'images/'.concat(app.store.get('hashFormat')).concat('[ext]')
                : 'images/'.concat(app.store.get('fileFormat')).concat('[ext]'),
        }));
        /**
         * Directory aliases
         */
        app.alias({
            '@fonts': app.path('src', 'fonts'),
            '@images': app.path('src', 'images'),
            '@scripts': app.path('src', 'scripts'),
            '@styles': app.path('src', 'styles'),
        });
        /**
         * Separate vendor code from application
         */
        app.splitChunks();
        /**
         * Production/development configuration
         */
        app.when(
        /**
         * Test for production
         */
        app.isProduction, 
        /**
         * Production
         */
        () => app.minimize().hash().runtime('single'), 
        /**
         * Development
         */
        ({ devtool, hooks, setPublicPath }) => {
            devtool();
            setPublicPath('/');
            hooks.async('event.compiler.stats', event_compiler_stats_1.default.bind(app));
            hooks.on('event.app.close', event_app_close_1.default.bind(app));
        });
    },
};
