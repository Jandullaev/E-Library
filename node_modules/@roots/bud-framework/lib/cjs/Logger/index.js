"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const lodash_1 = require("lodash");
const logger_constants_1 = require("./logger.constants");
const logger_dependencies_1 = require("./logger.dependencies");
/**
 * Logger service
 *
 * @public
 */
class Logger {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
        /**
         * Logger secrets hidden in process stdout
         *
         * @public
         */
        this.secrets = [
            process.cwd(),
            ...(this.flags['log.secret'] ?? []),
        ];
        /**
         * Stream destinations
         *
         * @public
         */
        this.stream = [process.stdout];
        /**
         * Config
         *
         * @public
         */
        this.config = logger_constants_1.INSTANCE_CONFIG;
        this.instantiate();
        this.scoped('logger').debug('config', this.instance.config);
    }
    /**
     * Context
     */
    get context() {
        const ctx = [];
        this.app.options.config.location.project &&
            ctx.push(this.app.options.config.location.project.split('/').pop());
        !this.app.isRoot && this.app.name && ctx.push(this.app.name);
        return ctx;
    }
    /**
     * Scoped logger
     *
     * @public
     */
    scoped(...scope) {
        return this.instance.scope(...[...this.context, ...(scope ?? [])]);
    }
    /**
     * Logger enabled
     *
     * @public
     */
    get enabled() {
        const logEnabled = !(0, lodash_1.isUndefined)(this.flags.log) ? this.flags.log : true;
        return logEnabled;
    }
    /**
     * Logger level
     *
     * @public
     */
    get level() {
        if ((0, lodash_1.isUndefined)(this.flags['log.level']))
            return logger_constants_1.LEVEL['v'];
        return logger_constants_1.LEVEL[this.flags['log.level']];
    }
    /**
     * Logger interactive mode
     *
     * @public
     */
    get interactive() {
        const usesPapertrail = !(0, lodash_1.isUndefined)(this.flags['log.papertrail'])
            ? !this.flags['log.papertrail']
            : false;
        return usesPapertrail;
    }
    /**
     * Logging flags
     *
     * @public
     */
    get flags() {
        return this.app.options.config.cli.flags;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    instantiate() {
        this.options = {
            disabled: !this.enabled,
            interactive: this.interactive,
            secrets: this.secrets,
            stream: this.stream,
            types: (0, logger_constants_1.types)(),
            logLevel: this.level,
        };
        this.instance = this.makeInstance();
    }
    /**
     * @public
     * @decorator `@bind`
     */
    makeInstance(options, config) {
        options = {
            ...this.options,
            ...(options ?? {}),
        };
        config = {
            ...this.config,
            ...(config ?? {}),
        };
        const instance = new logger_dependencies_1.Signale(options);
        instance.config(config);
        return instance;
    }
}
__decorate([
    logger_dependencies_1.bind
], Logger.prototype, "instantiate", null);
__decorate([
    logger_dependencies_1.bind
], Logger.prototype, "makeInstance", null);
exports.Logger = Logger;
