"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = exports.makeTerminator = void 0;
/**
 * Node shutdown factory
 *
 * @remarks
 * Returns a curried function which accepts a sigterm code
 * and a reason to be logged for the shutdown and returns a
 * a node `process.on` event handler.
 *
 * @param app - the Framework instance
 * @param options - Termination options
 * @returns
 *
 * @public
 */
const makeTerminator = (app, options = { timeout: 500 }) => {
    const exit = (code) => () => {
        global.process.exitCode = code;
        global.process.exit();
    };
    return (code, reason) => (err, promise) => {
        if (err && err instanceof Error) {
            const termLog = app.logger.scoped('node', 'terminate');
            termLog.error(err.message, err.stack);
        }
        app.logger.scoped(app.name, 'node', 'terminate').info(reason);
        app.close(exit(code));
        setTimeout(exit(code), options.timeout).unref();
    };
};
exports.makeTerminator = makeTerminator;
/**
 * Registers a callback for all kinds of application shutdown events.
 *
 * @remarks
 * Intended to be called in the constructor.
 *
 * @param app - The Framework instance
 * @returns void
 *
 * @public
 */
const initialize = (app) => {
    const handler = (0, exports.makeTerminator)(app, { timeout: 500 });
    global.process.on('uncaughtException', handler(1, 'uncaughtException'));
    global.process.on('unhandledRejection', handler(1, 'unhandledRejection'));
    global.process.on('beforeExit', handler(0, 'beforeExit'));
    global.process.on('exit', handler(0, 'exit'));
    global.process.on('SIGTERM', handler(0, 'SIGTERM'));
    global.process.on('SIGINT', handler(0, 'SIGINT'));
};
exports.initialize = initialize;
