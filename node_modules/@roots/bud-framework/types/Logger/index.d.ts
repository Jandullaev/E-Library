/// <reference types="node" />
import { SignaleConfig, SignaleOptions } from 'signale';
import { INSTANCE_CONFIG } from './logger.constants';
import { Signale } from './logger.dependencies';
import type { Framework } from './logger.interface';
/**
 * Logger service
 *
 * @public
 */
export declare class Logger {
    private app;
    /**
     * Context
     */
    get context(): Array<string>;
    /**
     * Scoped logger
     *
     * @public
     */
    scoped(...scope: Array<string>): import("signale").Signale<import("signale").DefaultMethods>;
    /**
     * Logger instance
     *
     * @public
     */
    instance: Signale;
    /**
     * Logger enabled
     *
     * @public
     */
    get enabled(): boolean;
    /**
     * Logger level
     *
     * @public
     */
    get level(): string;
    /**
     * Logger interactive mode
     *
     * @public
     */
    get interactive(): boolean;
    /**
     * Logging flags
     *
     * @public
     */
    get flags(): Record<string, any>;
    /**
     * Logger secrets hidden in process stdout
     *
     * @public
     */
    secrets: Array<string>;
    /**
     * Stream destinations
     *
     * @public
     */
    stream: (NodeJS.WriteStream & {
        fd: 1;
    })[];
    /**
     * Config
     *
     * @public
     */
    config: INSTANCE_CONFIG;
    options: SignaleOptions;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Framework);
    /**
     * @public
     * @decorator `@bind`
     */
    instantiate(): void;
    /**
     * @public
     * @decorator `@bind`
     */
    makeInstance(options?: SignaleOptions, config?: SignaleConfig): import("signale").Signale<import("signale").DefaultMethods>;
}
//# sourceMappingURL=index.d.ts.map