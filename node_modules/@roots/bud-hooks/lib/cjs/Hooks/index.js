"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hooks = void 0;
const bud_framework_1 = require("@roots/bud-framework");
const bud_support_1 = require("@roots/bud-support");
const { get, isFunction, isUndefined, set } = bud_support_1.lodash;
/**
 * Service allowing for fitering values through callbacks.
 *
 * @example
 * Add a new entry to the `webpack.externals` configuration:
 *
 * ```ts
 * hooks.on(
 *   'build/externals',
 *   externals => ({
 *     ...externals,
 *     $: 'jquery',
 *   }),
 * )
 * ```
 *
 * @example
 * Change the `webpack.output.filename` format:
 *
 * ```ts
 * hooks.on(
 *   'build.output.filename',
 *   () => '[name].[hash:4]',
 * )
 * ```
 *
 * @example
 * Create a new filter for a value:
 *
 * ```ts
 * hooks.filter('my-event-name', DEFAULT_VALUE)
 * ```
 *
 * @example
 * Create a new async filter for a value:
 *
 * ```ts
 * await hooks.filterAsync('my-event-name', async () => DEFAULT_VALUE)
 * ```
 *
 * @public
 */
class Hooks extends bud_framework_1.Service {
    constructor() {
        super(...arguments);
        /**
         * @internal
         */
        this.ident = 'hooks';
    }
    /**
     * hook getter
     *
     * @internal
     * @decorator `@bind`
     */
    get(path) {
        return get(this.repository, path);
    }
    /**
     * hook setter
     *
     * @internal
     * @decorator `@bind`
     */
    set(key, value) {
        set(this.repository, key, value);
        return this;
    }
    /**
     * Register a function to filter a value.
     *
     * @remarks
     * If a filter calls for this name the function is then run,
     * passing whatever data along for modification. If more than one
     * hook is registered to a name, they will be called sequentially
     * in the order they were registered, with each hook's output used
     * as the input for the next.
     *
     * @example
     * ```js
     * app.hooks.on(
     *   'namespace.key',
     *   value => 'replaced by this string',
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    on(id, callback) {
        const current = this.has(id) ? this.get(id) : [];
        this.set(id, [...current, callback]);
        return this.app;
    }
    /**
     * Register a function to filter a value.
     *
     * @remarks
     * If a filter calls for this name the function is then run,
     * passing whatever data along for modification. If more than one
     * hook is registered to a name, they will be called sequentially
     * in the order they were registered, with each hook's output used
     * as the input for the next.
     *
     * @example
     * ```js
     * app.hooks.on(
     *   'namespace.key',
     *   value => 'replaced by this string',
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    async(id, callback) {
        const current = this.has(id) ? this.get(id) : [];
        this.set(id, [...current, callback]);
        return this.app;
    }
    /**
     * Hooks filter
     *
     * @remarks
     * The other side of bud.hooks.on. Passes a key and a value. If
     * any filters are registered on that key they will transform
     * the output before it is returned.
     *
     * @example
     * ```js
     * bud.hooks.filter(
     *   'namespace.Key.event',
     *   ['array', 'of', 'items'],
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    filter(id, value) {
        if (!this.has(id)) {
            if (isUndefined(value))
                return;
            return isFunction(value) ? value() : value;
        }
        return this.get(id).reduce((v, cb) => (isFunction(cb) ? cb(v) : cb), value);
    }
    /**
     * Asyncronous hook filter
     *
     * @remarks
     * This method is used to filter a hook event.
     *
     * @example
     * ```js
     * bud.hooks.filter(
     *   'namespace.Key.event',
     *   ['array', 'of', 'items'],
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    async filterAsync(id, value) {
        if (!this.has(id)) {
            if (isUndefined(value))
                return;
            return isFunction(value) ? await value() : value;
        }
        return await this.get(id).reduce(async (promised, cb) => {
            const value = await promised;
            return isFunction(cb) ? await cb(value) : cb;
        }, value);
    }
}
__decorate([
    bud_support_1.bind
], Hooks.prototype, "get", null);
__decorate([
    bud_support_1.bind
], Hooks.prototype, "set", null);
__decorate([
    bud_support_1.bind
], Hooks.prototype, "on", null);
__decorate([
    bud_support_1.bind
], Hooks.prototype, "async", null);
__decorate([
    bud_support_1.bind
], Hooks.prototype, "filter", null);
__decorate([
    bud_support_1.bind
], Hooks.prototype, "filterAsync", null);
exports.Hooks = Hooks;
