"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.write = void 0;
const bud_support_1 = require("@roots/bud-support");
function makeTable(data) {
    return bud_support_1.table.table(data, {
        border: bud_support_1.table.getBorderCharacters('void'),
        columnDefault: {
            alignment: 'left',
            paddingLeft: 2,
            paddingRight: 2,
        },
        columns: [
            { alignment: 'left' },
            { alignment: 'center' },
            { alignment: 'center' },
            { alignment: 'right' },
        ],
    });
}
function write(stats, colors) {
    const compilers = stats.children?.map(compilation => {
        if (!compilation?.entrypoints)
            return compilation;
        const errors = compilation.errors?.map(error => {
            return (0, bud_support_1.boxen)(`\n${error.message}`, {
                title: `${error.title ?? 'error'}`,
                margin: {
                    top: 0,
                    bottom: 1,
                    left: 0,
                    right: 0,
                },
                padding: {
                    top: 0,
                    bottom: 0,
                    right: 0,
                    left: 0,
                },
                borderColor: colors.error,
            });
        });
        const warnings = compilation.warnings?.map(warning => {
            return (0, bud_support_1.boxen)(`\n${warning.message}`, {
                title: `${warning.title ?? 'warning'}`,
                margin: {
                    top: 0,
                    bottom: 1,
                    left: 0,
                    right: 0,
                },
                padding: {
                    top: 0,
                    bottom: 0,
                    right: 0,
                    left: 0,
                },
                borderColor: colors.warning,
            });
        });
        const assets = (0, bud_support_1.boxen)(makeTable([
            [' name', 'cached', 'hot', 'size'].map(i => bud_support_1.chalk.bold.hex(colors.flavor)(i)),
            ...compilation.assets
                ?.filter(({ emitted }) => emitted)
                .map(asset => [
                bud_support_1.chalk.hex(asset.info.error
                    ? colors.error
                    : asset.info.warn
                        ? colors.warning
                        : '#FFFFFF')(` ${asset.name}`),
                asset.cached
                    ? bud_support_1.chalk.hex(colors.success)('✔')
                    : bud_support_1.chalk.hex(colors.faded)('✘'),
                asset.info.hotModuleReplacement
                    ? bud_support_1.chalk.hex(colors.success)('✔')
                    : bud_support_1.chalk.hex(colors.faded)('✘'),
                bud_support_1.humanReadable.sizeFormatter()(asset.info.size),
            ]),
        ]), {
            title: `assets`,
            margin: {
                top: 1,
                bottom: 1,
                left: 0,
                right: 0,
            },
            padding: {
                left: 0,
                top: 1,
                right: 0,
                bottom: 0,
            },
            borderColor: colors.accent,
        });
        return {
            ...compilation,
            boxes: [
                compilation.errorsCount ? errors.join('\n') : null,
                compilation.warningsCount ? warnings.join('\n') : null,
                compilation.assets.filter(({ emitted }) => emitted).length
                    ? assets
                    : null,
            ].filter(Boolean),
        };
    });
    const out = compilers?.map(compiler => compiler.boxes.join(''));
    // eslint-disable-next-line no-console
    console.log(out.join(''));
}
exports.write = write;
