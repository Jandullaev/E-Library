"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const bud_support_1 = require("@roots/bud-support");
const webpack_cli_1 = __importDefault(require("webpack-cli"));
const index_js_1 = require("../Command/index.js");
/**
 * @internal
 */
class Doctor extends index_js_1.Command {
    /**
     * @internal
     */
    async run() {
        await this.prime(Doctor);
        this.logger = new bud_support_1.Signale({ scope: 'doctor' });
        await this.checkConfiguration();
    }
    /**
     * @param logger - logger instance
     *
     * @internal
     * @decorator `@bind`
     */
    async checkConfiguration() {
        try {
            /* Instantiate webpack-cli */
            const cli = new webpack_cli_1.default();
            const webpack = await cli.loadWebpack();
            /* Build webpack configuration */
            await this.build();
            this.conf = await this.app.compiler.before();
            if (!this.conf) {
                throw new Error('config not returned from bud compiler.');
            }
            if (!Array.isArray(this.conf)) {
                this.logger.info('the bud compiler should always return an array.');
                throw new Error('compiler did not return an array');
            }
            webpack.validate(this.conf);
            this.logger.success(`webpack configuration is valid`);
        }
        catch (error) {
            this.logger.error(error);
        }
    }
}
/**
 * @internal
 */
Doctor.id = 'doctor';
/**
 * @internal
 */
Doctor.description = 'diagnose issues';
/**
 * @internal
 */
Doctor.examples = [`$ bud doctor`];
__decorate([
    bud_support_1.bind
], Doctor.prototype, "checkConfiguration", null);
exports.default = Doctor;
