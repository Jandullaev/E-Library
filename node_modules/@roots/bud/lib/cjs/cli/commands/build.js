"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const oclif = __importStar(require("@oclif/core"));
const Command_1 = require("../Command");
const flags = __importStar(require("../flags"));
/**
 * @internal
 */
class Build extends Command_1.Command {
    async run() {
        await this.prime(Build);
        await this.runner.make();
        await this.app.api.call('run', []);
    }
}
exports.default = Build;
/**
 * @internal
 */
Build.description = 'compile source assets';
/**
 * @internal
 */
Build.examples = [`$ bud build`, `$ bud build --cache`];
/**
 * @internal
 */
Build.flags = {
    ...Command_1.Command.flags,
    ...flags.build,
    ...flags.target,
    ...flags.location,
    mode: oclif.Flags.string({
        description: 'compiler mode',
        default: 'production',
        options: ['development', 'production'],
        hidden: true,
    }),
    cache: oclif.Flags.boolean({
        allowNo: true,
        default: true,
        description: 'cache built modules to the filesystem',
    }),
    ['cache.type']: oclif.Flags.string({
        default: 'filesystem',
        options: ['filesystem', 'memory', 'false'],
    }),
    clean: oclif.Flags.boolean({
        allowNo: true,
        default: true,
        description: 'clean dist directory before compiling',
    }),
    config: oclif.Flags.string({
        description: 'path to config file',
    }),
    dashboard: oclif.Flags.boolean({
        allowNo: true,
        default: true,
        description: 'enable bud dashboard',
    }),
    devtool: oclif.Flags.string({
        description: 'specify source-map type',
    }),
    html: oclif.Flags.boolean({
        allowNo: true,
        description: 'generate an html template',
    }),
    hash: oclif.Flags.boolean({
        allowNo: true,
        description: 'hash compiled filenames',
    }),
    inject: oclif.Flags.boolean({
        allowNo: true,
        default: true,
        description: 'automatically register & boot extensions',
    }),
    manifest: oclif.Flags.boolean({
        allowNo: true,
        default: true,
        description: 'emit manifest.json',
    }),
    minimize: oclif.Flags.boolean({
        allowNo: true,
        description: 'minimize file size of compiled assets',
    }),
    ['splitChunks']: oclif.Flags.boolean({
        allowNo: true,
        description: 'create separate chunks for vendor and app code',
    }),
    vendor: oclif.Flags.boolean({
        allowNo: true,
        description: 'create separate chunks for vendor and app code; alias for splitChunks',
    }),
    runtime: oclif.Flags.boolean({
        allowNo: true,
        description: 'Create a runtime chunk',
    }),
    target: oclif.Flags.string({
        description: 'limit compilation to this compiler',
        multiple: true,
        default: [],
    }),
};
