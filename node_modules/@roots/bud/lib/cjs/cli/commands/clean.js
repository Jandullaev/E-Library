"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const oclif = __importStar(require("@oclif/core"));
const bud_support_1 = require("@roots/bud-support");
const cli_dependencies_js_1 = require("../cli.dependencies.js");
const index_js_1 = require("../Command/index.js");
const { ensureDir } = bud_support_1.fs;
/**
 * @internal
 */
class Clean extends index_js_1.Command {
    /**
     * @internal
     */
    async run() {
        await this.prime(Clean);
        this.logger.enable();
        this.logger.info('clearing artifacts');
        try {
            this.logger.pending(`emptying ${this.app.path('storage')}`);
            await ensureDir(this.app.path('storage'));
            await (0, cli_dependencies_js_1.remove)(this.app.path('storage'));
            this.logger.success(`emptying ${this.app.path('storage')}`);
        }
        catch (err) {
            this.logger.error(err);
            this.exit(1);
        }
        try {
            this.logger.pending(`emptying ${this.app.path('dist')}`);
            await (0, cli_dependencies_js_1.remove)(this.app.path('dist'));
            this.logger.success(`emptying ${this.app.path('dist')}`);
        }
        catch (err) {
            this.logger.error(err);
            this.exit(1);
        }
        this.exit(0);
    }
}
exports.default = Clean;
/**
 * @internal
 */
Clean.description = 'clean project distributables and caches';
/**
 * @internal
 */
Clean.examples = [`$ bud clean`];
/**
 * @internal
 */
Clean.flags = {
    ...index_js_1.Command.flags,
    ['log']: oclif.Flags.boolean({
        default: false,
        hidden: true,
    }),
    ['log.papertrail']: oclif.Flags.boolean({
        default: false,
        hidden: true,
    }),
    ['dashboard']: oclif.Flags.boolean({
        default: false,
        hidden: true,
    }),
};
