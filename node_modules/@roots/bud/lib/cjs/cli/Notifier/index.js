"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notifier = void 0;
const bud_support_1 = require("@roots/bud-support");
const path_1 = require("path");
const cli_dependencies_1 = require("../cli.dependencies");
/**
 * MacOS binary
 */
const MACOS_NOTIFIER_PATH = (0, path_1.resolve)(__dirname, '../../../vendor/roots-notifier.app/Contents/MacOS/roots-notifier');
class Notifier {
    constructor(app) {
        this.app = app;
        this.instance = new cli_dependencies_1.NodeNotifier.NotificationCenter({
            customPath: MACOS_NOTIFIER_PATH,
        });
        this.app.hooks.on('event.compiler.stats', this.notify);
    }
    async notify(stats) {
        const summary = stats.children?.reduce((summary, compilation) => {
            return {
                errors: summary.errors + (compilation.errorsCount ?? 0),
                warnings: summary.warnings + (compilation.warningsCount ?? 0),
                assets: summary.assets + (compilation.assets?.length ?? 0),
                time: summary.time + (compilation.time ?? 0),
            };
        }, {
            errors: stats.errorsCount ?? 0,
            warnings: stats.warningsCount ?? 0,
            assets: 0,
            time: 0,
        });
        const group = (0, path_1.dirname)(this.app.path('project')).split('/').pop();
        const title = !summary?.errors && !summary?.warnings
            ? 'Compilation success'
            : summary?.errors
                ? 'Compilation failed'
                : 'Compiled with warnings';
        this.instance.notify({
            title,
            group,
            message: `Done in ${bud_support_1.humanReadable.durationFormatter()(summary?.time)}.`,
            contentImage: (0, path_1.resolve)(__dirname, '../../../assets/bud-icon.jpg'),
        });
        return stats;
    }
}
__decorate([
    bud_support_1.bind
], Notifier.prototype, "notify", null);
exports.Notifier = Notifier;
