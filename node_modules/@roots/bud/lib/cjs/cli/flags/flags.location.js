"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.location = void 0;
const oclif = __importStar(require("@oclif/core"));
const path_1 = __importDefault(require("path"));
/**
 *
 * @param value -
 * @returns
 */
const parse = async (value) => {
    if (value.startsWith('~')) {
        return value.replace('~', process.env.HOME || '');
    }
    else if (value.startsWith('@')) {
        const fragment = value.replace('@', '');
        return path_1.default.resolve(process.cwd(), fragment);
    }
    else if (!value.startsWith('/')) {
        return path_1.default.resolve(process.cwd(), value);
    }
    return value;
};
exports.location = {
    ['location.src']: oclif.Flags.string({
        description: 'source directory',
        parse,
    }),
    ['location.dist']: oclif.Flags.string({
        description: 'distribution directory',
        parse,
    }),
    ['location.project']: oclif.Flags.string({
        description: 'repo root path',
        parse,
    }),
    ['location.storage']: oclif.Flags.string({
        description: 'storage directory',
        parse,
    }),
    ['location.modules']: oclif.Flags.string({
        description: 'public path',
        parse,
    }),
};
