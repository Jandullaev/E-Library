"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = void 0;
const bud_support_1 = require("@roots/bud-support");
const factory_1 = require("../../factory");
const seed_1 = require("../../seed");
const dynamic = __importStar(require("./config/dynamic.config"));
const manifest = __importStar(require("./config/manifest.config"));
const flags = __importStar(require("./config/override.config"));
const { isUndefined } = bud_support_1.lodash;
/**
 * @internal
 */
class Runner {
    /**
     * Class constructor
     *
     * @param cli - CLI state
     * @param options - Bud options
     * @internal
     */
    constructor(cli) {
        this.cli = cli;
    }
    /**
     * Initialize bud application
     *
     * @internal
     * @decorator `@bind`
     */
    async initialize() {
        const parse = (value, fallback) => isUndefined(value) ? fallback : value;
        const settings = {
            config: {
                cli: this.cli,
                mode: parse(this.cli.flags.mode, 'production'),
                location: {
                    project: parse(this.cli.flags['location.project'], seed_1.seed.location.project),
                    src: parse(this.cli.flags['location.src'], seed_1.seed.location.src),
                    dist: parse(this.cli.flags['location.dist'], seed_1.seed.location.dist),
                    storage: parse(this.cli.flags['location.storage'], seed_1.seed.location.storage),
                    publicPath: parse(this.cli.flags['publicPath'], seed_1.seed.build.output.publicPath),
                },
                cache: {
                    type: parse(this.cli.flags['cache.type'], seed_1.seed.cache.type),
                },
                features: {
                    cache: parse(this.cli.flags.cache, true),
                    clean: parse(this.cli?.flags.clean, true),
                    dashboard: parse(this.cli?.flags?.dashboard, true),
                    hash: parse(this.cli.flags.hash, false),
                    html: parse(this.cli.flags.html, false),
                    inject: parse(this.cli.flags.inject, true),
                    install: parse(this.cli.flags.install, false),
                    log: parse(this.cli.flags.log, false),
                    manifest: parse(this.cli.flags.manifest, true),
                    splitChunks: parse(this.cli.flags.splitChunks, false),
                },
            },
        };
        this.app = await (0, factory_1.factory)(settings);
        return this.app;
    }
    /**
     * Main process
     *
     * @param build - Boolean value indicating if compilation should occur
     *
     * @internal
     * @decorator `@bind`
     */
    async make() {
        this.logger.success({
            prefix: 'runner',
            message: 'framework ready',
        });
        try {
            this.logger.time('process user configs');
            await dynamic.configs(this.app, this.logger);
            await manifest.configs(this.app, this.logger);
            this.logger.timeEnd('process user configs');
        }
        catch (error) {
            throw new Error(error);
        }
        await flags.config(this.app, this.cli.flags);
        return this.app;
    }
}
__decorate([
    bud_support_1.bind
], Runner.prototype, "initialize", null);
__decorate([
    bud_support_1.bind
], Runner.prototype, "make", null);
exports.Runner = Runner;
