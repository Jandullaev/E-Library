import * as oclif from '@oclif/core';
import { Command } from '../Command';
/**
 * @internal
 */
export default class Build extends Command {
    /**
     * @internal
     */
    static description: string;
    /**
     * @internal
     */
    static examples: string[];
    /**
     * @internal
     */
    static flags: {
        mode: oclif.Interfaces.OptionFlag<string>;
        cache: oclif.Interfaces.BooleanFlag<boolean>;
        "cache.type": oclif.Interfaces.OptionFlag<string>;
        clean: oclif.Interfaces.BooleanFlag<boolean>;
        config: oclif.Interfaces.OptionFlag<string>;
        dashboard: oclif.Interfaces.BooleanFlag<boolean>;
        devtool: oclif.Interfaces.OptionFlag<string>;
        html: oclif.Interfaces.BooleanFlag<boolean>;
        hash: oclif.Interfaces.BooleanFlag<boolean>;
        inject: oclif.Interfaces.BooleanFlag<boolean>;
        manifest: oclif.Interfaces.BooleanFlag<boolean>;
        minimize: oclif.Interfaces.BooleanFlag<boolean>;
        splitChunks: oclif.Interfaces.BooleanFlag<boolean>;
        vendor: oclif.Interfaces.BooleanFlag<boolean>;
        runtime: oclif.Interfaces.BooleanFlag<boolean>;
        target: oclif.Interfaces.OptionFlag<string[]>;
        "location.project": import("../flags/flags.interface").Option<string>;
        "location.src": import("../flags/flags.interface").Option<string>;
        "location.dist": import("../flags/flags.interface").Option<string>;
        "location.storage": import("../flags/flags.interface").Option<string>;
        "location.modules": import("../flags/flags.interface").Option<string>;
        publicPath: oclif.Interfaces.OptionFlag<string>;
        log: import("../flags/flags.interface").Boolean;
        "log.level": import("../flags/flags.interface").Option<string>;
        "log.papertrail": import("../flags/flags.interface").Boolean;
        "log.secret": import("../flags/flags.interface").Option<string[]>;
        "log.min": import("../flags/flags.interface").Boolean;
        help: any;
        version: any;
    };
    run(): Promise<void>;
}
//# sourceMappingURL=build.d.ts.map