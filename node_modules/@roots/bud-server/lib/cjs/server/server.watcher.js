"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watcher = void 0;
const chokidar_1 = __importDefault(require("chokidar"));
const globby_1 = __importDefault(require("globby"));
const helpful_decorators_1 = require("helpful-decorators");
class Watcher {
    /**
     * Class constructor
     *
     * @param app - Application instance
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * Get watched files
     *
     * @public
     * @decorator `@bind`
     */
    async getWatchedFiles() {
        const { files, options } = this.app.store.get('server.watch');
        if (!files?.length)
            return [];
        const globResults = await (0, globby_1.default)(files.map((file) => this.app.path('project', file)), options);
        return globResults.map(entry => typeof entry === 'object' ? entry.path : entry);
    }
    /**
     * Initialize watch files
     *
     * @public
     * @decorator `@bind`
     */
    async watch() {
        const watchFiles = await this.getWatchedFiles();
        if (watchFiles.length) {
            this.instance = chokidar_1.default.watch(watchFiles.map(entry => {
                this.app.log(`watching`, entry, `for changes`);
                return entry;
            }));
        }
    }
}
__decorate([
    helpful_decorators_1.bind
], Watcher.prototype, "getWatchedFiles", null);
__decorate([
    helpful_decorators_1.bind
], Watcher.prototype, "watch", null);
exports.Watcher = Watcher;
