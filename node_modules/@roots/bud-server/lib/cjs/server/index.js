"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const express_1 = __importDefault(require("express"));
const middleware = __importStar(require("../middleware"));
const inject_1 = require("../util/inject");
const server_dependencies_1 = require("./server.dependencies");
const server_watcher_1 = require("./server.watcher");
/**
 * Server service class
 *
 * @public
 */
class Server extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Utilized middleware
         *
         * @public
         */
        this.middleware = {};
    }
    /**
     * Server config accessor
     *
     * @public
     */
    get config() {
        return this.app.store.get('server');
    }
    /**
     * Port
     *
     * @public
     */
    get port() {
        const url = this.app.store.get('server.dev.url');
        if (!url.port || url.port == '') {
            return url.protocol == 'https:' ? '443' : '80';
        }
        return url.port;
    }
    /**
     * Service boot callback
     *
     * @public
     * @decorator `@bind`
     */
    async boot() {
        this.application = (0, express_1.default)();
        this.app.hooks
            .on('server.middleware', () => middleware)
            .hooks.on('server.inject', () => [
            instance => `@roots/bud-server/client/index.js?name=${instance.name}&path=/__bud/hmr`,
        ])
            .hooks.async('event.server.before', async (app) => {
            app.when(({ store }) => store.is('server.middleware.proxy', true), ({ hooks }) => hooks.on('server.inject', inject => [
                ...inject,
                () => `@roots/bud-server/client/proxy-click-interceptor.js`,
            ]));
            return app;
        });
    }
    /**
     * Apply middlewares
     *
     * @returns
     */
    applyMiddlewares() {
        Object.entries(this.app.hooks.filter('server.middleware')).map(([key, factory]) => {
            if (this.app.store.isFalse(`server.middleware.${key}`))
                return this.log(`info`, `not using middleware: ${key}`);
            const middleware = factory(this.app);
            Object.assign(this.middleware, {
                [key]: middleware,
            });
            this.application.use(this.middleware[key]);
            this.log(`info`, `using middleware: ${key}`);
        });
    }
    /**
     * {@inheritDoc @roots/bud-framework#Server.Interface.run}
     *
     * @public
     * @decorator `@bind`
     */
    async run() {
        /**
         * Instantiate watcher
         */
        this.watcher = new server_watcher_1.Watcher(this.app);
        /**
         * Filter server before
         */
        await this.app.hooks.filterAsync('event.server.before', this.app);
        /**
         * Prep and run compilation
         */
        await this.compile();
        this.applyMiddlewares();
        /**
         * 404 middleware
         */
        this.application.use((_req, res, _next) => {
            res.status(404).send("Sorry can't find that!");
        });
        /**
         * Listen
         */
        this.instance = this.application.listen(this.port, async (error) => {
            this.log('info', `started server on %s`, this.port);
            if (error)
                this.log('error', error);
            this.app.hooks.filter('event.server.listen');
        });
        /**
         * If watching and a watched file is touched, update hmr websocket
         * event subscribers.
         */
        await this.watcher.watch();
        this.watcher.instance?.on('change', path => {
            this.middleware?.hot?.publish({
                action: 'reload',
                message: `Detected file change: ${path}. Reloading window.`,
            });
        });
        await this.app.hooks.filterAsync('event.server.after', this.app);
        return this;
    }
    async compile() {
        await Promise.all([this.app, ...this.app.children.getValues()].map(async (instance) => {
            await (0, inject_1.inject)(instance, this.app.hooks.filter('server.inject'));
        }));
        this.app.hooks.on('config.override', config => {
            return config.map(compilerConfiguration => {
                compilerConfiguration.bail = false;
                return compilerConfiguration;
            });
        });
        await this.app.compiler.compile();
    }
    /**
     * App close handler
     *
     * @public
     * @decorator `@bind`
     */
    close() { }
}
__decorate([
    server_dependencies_1.bind
], Server.prototype, "boot", null);
__decorate([
    server_dependencies_1.bind
], Server.prototype, "run", null);
__decorate([
    server_dependencies_1.bind
], Server.prototype, "compile", null);
__decorate([
    server_dependencies_1.bind
], Server.prototype, "close", null);
exports.Server = Server;
