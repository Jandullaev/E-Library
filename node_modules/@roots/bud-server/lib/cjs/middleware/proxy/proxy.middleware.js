"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.middleware = void 0;
const http_proxy_middleware_1 = require("http-proxy-middleware");
const signale_1 = require("signale");
const req_interceptor_1 = require("./req.interceptor");
const res_interceptor_1 = require("./res.interceptor");
const url_1 = require("./url");
/**
 * Proxy middleware factory
 *
 * @public
 */
const middleware = (app) => {
    if (app.store.is('features.proxy', false))
        return;
    const url = new url_1.URL(() => app);
    const interceptor = new res_interceptor_1.ResponseInterceptorFactory(() => app, url);
    const request = new req_interceptor_1.RequestInterceptorFactory(() => app, url);
    return (0, http_proxy_middleware_1.createProxyMiddleware)(app.hooks.filter('proxy.options', () => ({
        changeOrigin: true,
        cookieDomainRewrite: {
            [url.proxy.host]: url.dev.host,
        },
        headers: {
            'X-Proxy-By': '@roots/bud',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Credentials': '*',
            'Access-Control-Allow-Methods': '*',
        },
        hostRewrite: url.dev.host,
        logLevel: app.store.is('features.log', true)
            ? "info" /* 'info' */
            : "silent" /* 'silent' */,
        logProvider: () => {
            let logger = new signale_1.Signale();
            return logger.scope('server', 'proxy');
        },
        onProxyReq: request.make(),
        onProxyRes: interceptor.make(),
        secure: false,
        selfHandleResponse: true,
        target: url.proxy.href,
    })));
};
exports.middleware = middleware;
