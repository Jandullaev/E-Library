"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestInterceptorFactory = void 0;
const bud_support_1 = require("@roots/bud-support");
const url_1 = require("url");
/**
 * Proxy request interceptor
 *
 * @public
 */
class RequestInterceptorFactory {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, url) {
        this._app = _app;
        this.url = url;
    }
    /**
     * Bud instance
     *
     * @public
     */
    get app() {
        return this._app();
    }
    /**
     * Callback for `http-proxy-middleware` `onProxyReq`
     *
     * @param proxyRequest - proxy client request
     * @param request - incoming message
     * @param response - server response
     * @returns void
     *
     * @public
     * @decorator `@bind`
     */
    async _interceptor(proxyRequest, request, _response) {
        try {
            proxyRequest.setHeader('x-bud-dev-origin', this.url.dev.origin);
            proxyRequest.setHeader('x-bud-dev-pathname', new url_1.URL(request.url, `http://${request.headers.host}`)
                .pathname);
        }
        catch (err) {
            process.stderr.write(`${err}\n`);
        }
    }
    /**
     * Returns the onProxyReq callback
     */
    make() {
        return this._interceptor;
    }
}
__decorate([
    bud_support_1.bind
], RequestInterceptorFactory.prototype, "_interceptor", null);
__decorate([
    bud_support_1.bind
], RequestInterceptorFactory.prototype, "make", null);
exports.RequestInterceptorFactory = RequestInterceptorFactory;
