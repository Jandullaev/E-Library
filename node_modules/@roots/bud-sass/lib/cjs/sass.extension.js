"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extension = void 0;
const postcss = __importStar(require("./sass.postcss"));
const webpack = __importStar(require("./sass.webpack"));
/**
 * Adds scss and postcss-scss support to Bud
 *
 * @public
 */
exports.extension = {
    /**
     * Extension identifier
     *
     * @public
     */
    name: '@roots/bud-sass',
    /**
     * Extension registration callback
     *
     * @param app - Bud instance
     * @param logger - Bud logger
     *
     * @public
     */
    async register(app, logger) {
        // add webpack loaders and rules
        app.build.loaders.sass = webpack.loader(logger);
        app.build.items.sass = await webpack.item(logger);
        app.build.setRule('sass', {
            test: app => app.store.get('patterns.sass'),
            exclude: app => app.store.get('patterns.modules'),
            use: ({ build, isProduction }) => Array.from(new Set([
                isProduction ? build.items.minicss : build.items.style,
                build.items.css,
                build.items.postcss ?? undefined,
                build.items['resolve-url'],
                build.items.sass,
            ])).filter(Boolean),
        });
        // add .scss extension
        app.hooks.on('build.resolve.extensions', webpack.resolveExtensions);
    },
    /**
     * Extension boot callback
     *
     * @param app - Bud instance
     * @param logger - Bud logger
     */
    async boot(app, logger) {
        logger.await('configuring postcss');
        postcss.configure(app);
        postcss.verify(app, logger);
        logger.complete('configuring postcss');
    },
};
