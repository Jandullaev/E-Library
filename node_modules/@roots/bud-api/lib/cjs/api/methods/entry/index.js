"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssets = exports.makeEntrypoints = exports.entry = void 0;
const bud_support_1 = require("@roots/bud-support");
const entry_dependencies_1 = require("./entry.dependencies");
const entry = async function (...args) {
    this;
    /**
     * Ducktype entrypoint to determine if it was called like
     * `entry(name, ...assets)` or `entry({[name]: ...assets})`
     */
    const isSingleEntry = (0, entry_dependencies_1.isString)(args[0]) && args.length > 1;
    /**
     * Cast single assets to an array
     */
    const entrypoints = isSingleEntry ? [{ [args[0]]: args[1] }] : args;
    /**
     * Make the entrypoints and return the framework
     * to the builder
     */
    await makeEntrypoints.bind(this)(...entrypoints);
    return this;
};
exports.entry = entry;
/**
 * Make entrypoints
 *
 * @internal
 */
async function makeEntrypoints(entry) {
    /**
     * Reduce entrypoints to {@link EntryObject}
     *
     * @param entrypoints - {@link EntryObject | accumulator}
     * @param entryTuple - name and raw entry
     *
     * @returns entry object
     */
    const reducer = async (promised, [name, entry]) => {
        const entrypoints = await promised;
        entry = (0, entry_dependencies_1.isString)(entry) ? { import: [entry] } : entry;
        entry = (0, entry_dependencies_1.isArray)(entry) ? { import: entry } : entry;
        entry.import = await getAssets.bind(this)(entry.import);
        this.api.log('success', {
            message: `entrypoints added ${name}`,
            suffix: bud_support_1.chalk.dim(JSON.stringify(entry)),
        });
        return {
            ...entrypoints,
            [name]: {
                ...(entrypoints[name] ?? {}),
                import: [
                    ...new Set([
                        ...(entrypoints[name]?.import ?? []),
                        ...entry.import,
                    ]),
                ],
            },
        };
    };
    const hook = async (entries) => {
        const current = await entries;
        const newItems = await Object.entries(entry).reduce(reducer, Promise.resolve(current ?? {}));
        return {
            ...(current ?? {}),
            ...newItems,
        };
    };
    this.hooks.async('build.entry', hook);
    return this;
}
exports.makeEntrypoints = makeEntrypoints;
async function getAssets(imports) {
    const globDir = this.path('src');
    this.info({
        message: 'glob search',
        suffix: JSON.stringify(imports),
    });
    this.info({ message: 'glob directory', suffix: globDir });
    try {
        const results = await (0, entry_dependencies_1.globby)(imports, {
            cwd: this.path('src'),
        });
        this.info({
            message: 'glob results',
            suffix: JSON.stringify(results),
        });
        if (!results.length) {
            this.error(`bud.entry found no files matching ${JSON.stringify(imports)}. check your config for errors. files should be specified relative to ${this.path('src')}. fast glob syntax can be referenced here https://git.io/JkGbw`);
            throw new Error(`nothing resolvable for ${JSON.stringify(imports)} query of results for ${globDir}`);
        }
        return results;
    }
    catch (error) {
        throw new Error(error);
    }
}
exports.getAssets = getAssets;
