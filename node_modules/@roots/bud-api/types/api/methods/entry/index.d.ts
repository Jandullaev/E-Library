import type { Framework } from '@roots/bud-framework';
import type { EntryObject } from '@roots/bud-framework/types/entry';
import type { GlobTask } from 'globby';
export { EntryObject };
/**
 * Entry assets expressed as a key-value mapping
 */
export interface EntryInput {
    [k: string]: EntryObject | EntryObject['import'] | GlobTask['pattern'];
}
/**
 * An entry asset or an array of entry assets expressed with fast-glob syntax.
 */
export declare type EntryValue = GlobTask['pattern'] | Array<GlobTask['pattern']>;
export interface entry {
    (name: string, entrypoint: EntryValue): Promise<Framework>;
}
export interface entry {
    (entrypoints: EntryInput): Promise<Framework>;
}
export interface facade {
    (name: string, entrypoint: EntryValue): Framework;
}
export interface facade {
    (entrypoints: EntryInput): Framework;
}
export declare const entry: entry;
/**
 * Make entrypoints
 *
 * @internal
 */
export declare function makeEntrypoints(this: Framework, entry: EntryObject): Promise<Framework>;
export declare function getAssets(imports: EntryObject['import']): Promise<EntryObject['import']>;
//# sourceMappingURL=index.d.ts.map